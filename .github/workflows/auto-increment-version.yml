name: Auto Increment Version and Release Workflow

on:
  push:
    branches:
      - main
    paths:
      - '.github/copilot-instructions.md'
      - '.github/git-commit-instructions.md'
      - '.github/prompts/**'

  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write
  actions: write
  issues: write

jobs:
  increment-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      old_version: ${{ steps.bump.outputs.old_version }}
      version_changed: ${{ steps.bump.outputs.version_changed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Determine Version Bump Type
        id: bump-type
        run: |
          # Default to patch
          BUMP_TYPE="patch"
          
          # If manual trigger, use input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.bump_type }}"
          else
            # Analyze commit message for version hints
            COMMIT_MSG="${{ github.event.head_commit.message }}"
            
            if echo "$COMMIT_MSG" | grep -iE "(breaking|major)"; then
              BUMP_TYPE="major"
            elif echo "$COMMIT_MSG" | grep -iE "(feature|feat|minor)"; then
              BUMP_TYPE="minor"
            elif echo "$COMMIT_MSG" | grep -iE "(fix|patch|bug)"; then
              BUMP_TYPE="patch"
            fi
          fi
          
          echo "Determined bump type: $BUMP_TYPE"
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Read Current Version
        id: current-version
        run: |
          # Check if version.json exists, create if not
          if [ ! -f "version.json" ]; then
            echo '{"version": "0.0.0", "updated": "", "description": "GitHub Copilot shared configuration version"}' > version.json
            git add version.json
            git commit -m "chore: initialize version.json [skip ci]"
          fi
          
          CURRENT_VERSION=$(cat version.json | jq -r '.version')
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump Version
        id: bump
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current_version }}"
          BUMP_TYPE="${{ steps.bump-type.outputs.bump_type }}"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Remove any leading 'v' if present
          MAJOR=${MAJOR#v}
          
          # Increment based on bump type
          case "$BUMP_TYPE" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          
          # Check if version actually changed
          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
          
          echo "old_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update Version File
        if: steps.bump.outputs.version_changed == 'true'
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          
          # Update version.json with new version and timestamp
          jq --arg version "$NEW_VERSION" \
             --arg updated "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
             --arg commit_sha "${{ github.sha }}" \
             --arg commit_message "${{ github.event.head_commit.message }}" \
             '.version = $version | .updated = $updated | .last_commit = {sha: $commit_sha, message: $commit_message}' \
             version.json > tmp.json && mv tmp.json version.json

      - name: Update CHANGELOG
        if: steps.bump.outputs.version_changed == 'true'
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          OLD_VERSION="${{ steps.bump.outputs.old_version }}"
          TODAY=$(date +"%Y-%m-%d")
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          COMMIT_AUTHOR="${{ github.event.head_commit.author.name }}"
          COMMIT_SHA="${{ github.sha }}"
          
          # Create CHANGELOG.md if it doesn't exist
          if [ ! -f CHANGELOG.md ]; then
            cat > CHANGELOG.md << 'EOF'
          # Changelog
          
          All notable changes to the GitHub Copilot shared configuration will be documented in this file.
          
          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          
          EOF
          fi
          
          # Create changelog entry
          cat > changelog_entry.md << EOF
          
          ## [$NEW_VERSION] - $TODAY
          
          ### Changed
          - $COMMIT_MESSAGE
          
          **Details:**
          - Updated from v$OLD_VERSION to v$NEW_VERSION
          - Commit: [\`${COMMIT_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/$COMMIT_SHA)
          - Author: $COMMIT_AUTHOR
          
          EOF
          
          # Insert new entry after the header
          head -n 6 CHANGELOG.md > new_changelog.md
          cat changelog_entry.md >> new_changelog.md
          tail -n +7 CHANGELOG.md >> new_changelog.md
          mv new_changelog.md CHANGELOG.md
          rm changelog_entry.md

      - name: Commit Version Changes
        if: steps.bump.outputs.version_changed == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            chore: bump version to ${{ steps.bump.outputs.new_version }} [skip ci]
            
            - Updated from ${{ steps.bump.outputs.old_version }} to ${{ steps.bump.outputs.new_version }}
            - Bump type: ${{ steps.bump-type.outputs.bump_type }}
            - Trigger: ${{ github.event_name }}
          file_pattern: 'version.json CHANGELOG.md'
          commit_user_name: 'github-actions[bot]'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_author: 'github-actions[bot] <github-actions[bot]@users.noreply.github.com>'

      - name: Create Git Tag
        if: steps.bump.outputs.version_changed == 'true'
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          
          # Create annotated tag
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION
          
          Changes:
          - ${{ github.event.head_commit.message }}
          
          Full changelog: https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md"
          
          # Push tag
          git push origin "v$NEW_VERSION"

  create-release:
    needs: increment-version
    runs-on: ubuntu-latest
    if: needs.increment-version.outputs.version_changed == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main  # Get updated main branch

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ needs.increment-version.outputs.new_version }}"
          release_name: "Release v${{ needs.increment-version.outputs.new_version }}"
          body: |
            ## üöÄ GitHub Copilot Configuration v${{ needs.increment-version.outputs.new_version }}
            
            ### üìã Changes
            - ${{ github.event.head_commit.message }}
            
            ### üìä Version Information
            - **Previous Version**: v${{ needs.increment-version.outputs.old_version }}
            - **Current Version**: v${{ needs.increment-version.outputs.new_version }}
            - **Release Date**: ${{ steps.date.outputs.date }}
            
            ### üìÅ What's Updated
            - Shared GitHub Copilot instructions
            - Prompt templates for Spring Boot development
            - Git commit guidelines
            
            ### üîÑ How to Update Your Microservices
            Since this workflow doesn't automatically notify microservices, you'll need to manually trigger updates:
            
            2. **Manual**: Go to each microservice repository and trigger the "Sync Copilot Configuration" workflow manually
            3. **API trigger**: Use the GitHub API to trigger repository dispatch events
            
            ### üìñ Full Changelog
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for complete version history.
            
            ### üéØ Affected Components
            - Global copilot instructions
            - Spring Boot prompt templates
            - Git commit message guidelines
            
            ---
            *This release was automatically created by the auto-increment-version workflow*
          draft: false
          prerelease: false

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

  create-notification-issue:
    needs: increment-version
    runs-on: ubuntu-latest
    if: needs.increment-version.outputs.version_changed == 'true'
    steps:
      - name: Create Notification Issue
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = '${{ needs.increment-version.outputs.new_version }}';
            const oldVersion = '${{ needs.increment-version.outputs.old_version }}';
            
            const issueBody = `## üîÑ Microservices Update Required
            
            A new version of GitHub Copilot configuration has been released and needs to be synced to microservices.
            
            ### üìä Version Details
            - **New Version**: v${newVersion}
            - **Previous Version**: v${oldVersion}
            - **Release**: https://github.com/${{ github.repository }}/releases/tag/v${newVersion}
            
            ### üéØ Microservices to Update
            - [ ] user-service
            - [ ] order-service  
            - [ ] payment-service
            - [ ] Add more services here...
            
            ### üîß Update Methods
            
            
            **Option 2: Manual trigger**
            - Go to each microservice repository
            - Navigate to Actions ‚Üí "Sync Copilot Configuration"
            - Click "Run workflow"
            
            **Option 3: API trigger**
            \`\`\`bash
            # Example for user-service
            curl -X POST \\
              -H "Authorization: token YOUR_TOKEN" \\
              -H "Accept: application/vnd.github.v3+json" \\
              https://api.github.com/repos/your-org/user-service/dispatches \\
              -d '{"event_type":"copilot-config-updated"}'
            \`\`\`
            
            ### ‚úÖ Verification
            After sync, verify that each microservice has:
            - Updated \`.github/copilot-instructions.md\`
            - Updated \`.github/prompts/*.prompt.md\`
            - Version file shows v${newVersion}
            
            ---
            *This issue was automatically created by the version increment workflow*`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ü§ñ Update microservices to Copilot config v${newVersion}`,
              body: issueBody,
              labels: ['copilot-sync', 'automated', 'microservices-update']
            });

  output-summary:
    needs: increment-version
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Output Summary
        run: |
          if [ "${{ needs.increment-version.outputs.version_changed }}" = "true" ]; then
            echo "‚úÖ Version successfully incremented to v${{ needs.increment-version.outputs.new_version }}"
            echo "üìã Previous version: v${{ needs.increment-version.outputs.old_version }}"
            echo "üè∑Ô∏è Git tag created: v${{ needs.increment-version.outputs.new_version }}"
            echo "üìÑ GitHub release created"
            echo "üìù Issue created for microservice updates"
            echo ""
            echo "üîÑ Microservices will sync automatically or can be triggered manually"
          else
            echo "‚ÑπÔ∏è No version change needed - skipping release creation"
          fi
